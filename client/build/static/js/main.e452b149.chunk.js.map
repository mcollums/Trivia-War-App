{"version":3,"sources":["utils/socketAPI.js","utils/API.js","components/Nav/index.js","pages/PlayNow.js","components/Grid/index.js","components/Jumbotron/index.js","pages/Authentication.js","pages/UserHome.js","components/MPCategory/index.js","pages/MultiPlayerCategory.js","components/MPGameCard/index.js","components/GameCol/index.js","pages/GameContainer.js","components/GameCard/index.js","pages/SPGameContainer.js","pages/NoMatch.js","components/SPGameCard/index.js","pages/SingleCategory.js","App.js","index.js"],"names":["socket","openSocket","process","SOCKET_URL","on","message","console","log","socketAPI","subscribeTimer","callback","time","publishLogin","userData","emit","subscribeAuthorized","publishSeekGame","categoryId","subscribeMatchmaking","subscribeGameStart","sessionId","publishGCMount","subscribeSessionInfo","sessionInfo","publishPlayerSelect","result","subscribeScoreUpdate","subscribeNextQuestion","score","publishEndGame","subscribeFinalScore","subscribeSeekError","subscribeEndTimer","subscribeTimerDec","disconnect","API","getGames","axios","get","getOneGame","id","logout","checkAuth","getUsers","getOneUser","getOneUserEmail","email","updateUserScore","put","Nav","handleLogout","catch","err","react_default","a","createElement","style","backgroundColor","className","border","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","borderColor","react_router_dom","to","fontSize","fontFamily","color","textDecoration","href","onClick","this","marginRight","Component","PlayNow","state","redirectTo","handleSinglePlay","_this","props","history","push","handleMultiPlay","_this2","then","response","setState","_this3","react_router","withRouter","Container","_ref","fluid","children","minHeight","height","concat","Row","_ref2","Col","_ref3","size","textAlign","split","map","join","Jumbotron","borderRadius","margin","jumboHeight","width","jumboWidth","clear","paddingTop","Authentication","users","username","picLink","password","errorMessage","welcomeEmail","googleSigninUrl","loginOpen","registerOpen","openModal","modal","Object","defineProperty","closeModal","handleInput","event","_event$target","target","name","value","handleFormSubmit","preventDefault","_this$state","post","handleFormRegister","_this$state2","handleFormLogout","loadProfileInfo","data","window","location","pathname","searchParams","URLSearchParams","search","code","loadUsers","res","_this4","components_Jumbotron","maxHeight","maxWidth","react_modal_lib_default","ariaHideApp","isOpen","onAfterOpen","afterOpenModal","onRequestClose","contentLabel","overlay","position","top","left","right","bottom","content","background","overflow","WebkitOverflowScrolling","outline","padding","onChange","marginTop","aria-describedby","placeholder","marginLeft","scope","slice","user","index","key","totalWins","totalLosses","UserHome","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","findRanking","ranking","allUsers","i","length","_id","userInfo","handlePlayNowBtn","userInfoFromDB","loadUserData","loadUserById","_this5","className","alt","src","paddingBottom","styles","MPCategory","handleSelect","category","MultiPlayer","handleCatSelect","selected","gameStart","matchmakingOpen","bind","assertThisInitialized","info","components_MPCategory","GameCard","answer","display","flex","flexWrap","justifyContent","alignContent","GameCol","quizQuestions","GameContainer","setUserAnswer","userAnswerResult","userSelect","newIncorrect","incorrect","correctAnswer","newCorrect","correct","setNextQuestion","newIndex","timer","question","questions","answers","endGame","quizId","title","questionCount","outcome","JSON","stringify","userPosition","playerOne","playerTwo","getGame","winner","gameId","setQuestionState","selection","components_GameCol","MPGameCard","handleSelection","nextIndex","SinglePlayerGameContainer","socketArr","getUserPic","click","clearInterval","timerID","setInterval","decrimentTime","components_GameCard","NoMatch","role","SPGameCard","loadPage","addCategory","SingleCategory","getAllGames","components_SPGameCard","SPGameContainer","App","userEmail","authorized","inGame","componentDidMount","components_Nav","exact","path","component","pages_UserHome","SingleGameContainer","MultiPlayerCat","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e452b149.chunk.js","sourcesContent":["import openSocket from 'socket.io-client';\n\nconst socket = openSocket(process.env.SOCKET_URL || 'http://localhost:3001')\n\n//As soon as a user connects, add them to the UsersArray\nsocket.on(\"message\", message => console.log(message));\nsocket.on(\"addedEmail\", message => console.log(message));\n\nexport default {\n    subscribeTimer: (callback) => {\n        socket.on(\"timer\", time => callback(time));\n    },\n\n    //Authenticating User and Adding to playersArray in server\n    publishLogin: userData => {\n        socket.emit(\"setuser\", userData);\n    },\n    subscribeAuthorized: callback => {\n        socket.on(\"authorized\", (message) => callback(message));\n    },\n\n    //When the user wants to join a game\n    publishSeekGame: categoryId => {\n        socket.emit(\"seekGame\", categoryId);\n    },\n    //User is the only one in the session\n    subscribeMatchmaking: (callback) => {\n        socket.on(\"matchmaking\", message => callback(message));\n    },\n    //When the game has two users...\n    subscribeGameStart: (callback) => {\n        socket.on(\"startGame\", sessionId => callback(sessionId));\n    },\n    //When the Game Container Mounts...\n    publishGCMount: () => {\n        socket.emit('GCMount');\n    },\n    //Send back info about this session\n    subscribeSessionInfo: (callback) => {\n        socket.on('sessionInfo', sessionInfo => callback(sessionInfo));\n    },\n    //when the player makes a choice...\n    publishPlayerSelect: (result) => {\n        socket.emit('playerChoice', result);\n    },\n    //server lets each player know if the other has selected an answer\n    subscribeScoreUpdate: (callback) => {\n        socket.on('scoreUpdate', message => callback(message));\n    },\n    //server tells page to go to next question\n    subscribeNextQuestion: (callback) => {\n        socket.on('nextQuestion', score => callback(score));\n    },\n    publishEndGame: (result) => {\n        socket.emit('gameOver', result);\n    },\n    subscribeFinalScore: (callback) => {\n        socket.on('finalScore', result => callback(result))\n    },\n    subscribeSeekError: callback => {\n        socket.on(\"seekError\", message => {\n            callback(message)\n        })\n    },\n    subscribeEndTimer: callback => {\n        socket.on('timesUp', message => callback(message));\n    },\n    subscribeTimerDec: (callback) => {\n        socket.on('timerDec', message => callback(message));\n    },\n    disconnect(){\n        socket.disconnect()\n    }\n}","import axios from \"axios\";\n\nexport default {\n  // Gets all games\n  getGames: function () {\n    console.log(\"API Get Games\");\n    return axios.get(\"/api/game\");\n  },\n  // Gets the game with the given id\n  getOneGame: function (id) {\n    return axios.get(\"/api/game/\" + id);\n  },\n  logout: function () {\n    return axios.get(\"/logout\");\n  },\n  checkAuth: function () {\n    return axios.get(\"/user/me\");\n  },\n  getUsers: function () {\n    return axios.get(\"/api/user\")\n  },\n  getOneUser: function (id) {\n    return axios.get(\"/api/user/\" + id);\n  },\n  getOneUserEmail: function(email) {\n    return axios.get(\"/api/user/\" + email);\n  },\n  updateUserScore: function(id) {\n    return axios.put(\"api/user/score/\" + id);\n  }\n};\n\n","import React, { Component } from \"react\";\nimport API from \"../../utils/API.js\";\nimport { Link } from \"react-router-dom\";\n\nclass Nav extends Component {\n\n  handleLogout = () => {\n    API.logout().catch(err => console.log(err));\n    //TODO Handle Logout for socket.io\n  }\n\n  render() {\n    return (\n      <nav style={{ backgroundColor: \"#62cbc2\" }} className=\"navbar navbar-light\" >\n        <button style={{ border: \"none\" }} className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span style={{ borderColor: \"black\" }} className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <li className=\"nav-item active\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n              {/* <a style={{fontSize: \"25px\", fontFamily: \"'Warnes', cursive\"}} className=\"nav-link\" href=\"/home\">Home <span className=\"sr-only\"></span></a> */}\n              <Link to=\"/home\" style={{ fontSize: \"25px\", fontFamily: \"'Warnes', cursive\", color: \"black\", textDecoration: \"none\" }} className=\"nav-link\">Home</Link>\n            </li>\n            <li className=\"nav-item\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n              {/* <a className=\"nav-link\" href=\"/play\">Play Now</a> */}\n              <Link to=\"/play\" style={{ color: \"black\", textDecoration: \"none\" }}>Play Now</Link>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\" onClick={this.handleLogout}>Logout</a>\n            </li>\n          </ul>\n        </div>\n        <Link to=\"/home\" style={{ fontSize: \"30px\", fontFamily: \"'Yatra One', cursive\", marginRight: \"45%\", color: \"black\", textDecoration: \"none\" }} className=\"nav-link\" >TRIVIA WAR</Link>\n        {/* <a style={{fontSize: \"30px\", fontFamily: \"'Yatra One', cursive\", marginRight:\"45%\"}} className=\"navbar-brand\" href=\"/home\">TRIVIA WAR</a> */}\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport './Pages.css';\nimport API from \"../utils/API.js\"\n\nclass PlayNow extends Component {\n    state = {\n        redirectTo: null\n    };\n\n    componentDidMount() {\n\n        API.checkAuth()\n            .then(response => {\n                // this runs if the user is logged in\n                // console.log(\"response: \", response)\n                console.log(\"user authenticated\");\n            })\n            .catch(err => {\n                // this runs if the uer is NOT logged in\n                this.setState({ redirectTo: \"/\" })\n            })\n    }\n  \n    handleSinglePlay = () => {\n        let path = \"/single\";\n        this.props.history.push(path);\n    }\n\n    handleMultiPlay = () => {\n        let path = \"/multi\";\n        this.props.history.push(path);\n    }\n\n    render() {\n        if (this.state.redirectTo) {\n            return <Redirect to={this.state.redirectTo} />\n        }\n\n        return (\n            <div className=\"playnowContain\">\n                    <div className=\"jumbotronz\" onClick={() => this.handleSinglePlay()}>\n                        <h1 className=\"ml8\">\n                            <span className=\"letters-container\">\n                                <span className=\"letters letters-left\">Single Player</span>\n                                <span className=\"letters bang\">!</span>\n                            </span>\n                            <span className=\"circle circle-white\"></span>\n                            <span className=\"circle circle-dark\"></span>\n                            <span className=\"circle circle-container\">\n                                <span className=\"circle circle-dark-dashed\"></span>\n                            </span>\n                        </h1>\n\n                    </div>\n\n                    <div className=\"jumbotronz\" onClick={() => this.handleMultiPlay()}>\n                    <h1 className=\"ml8\">\n                            <span className=\"letters-container\">\n                                <span className=\"letters letters-left\">Multi - Player</span>\n                                <span className=\"letters bang\">!</span>\n                            </span>\n                            <span className=\"circle circle-white\"></span>\n                            <span className=\"circle circle-dark\"></span>\n                            <span className=\"circle circle-container\">\n                                <span className=\"circle circle-dark-dashed\"></span>\n                            </span>\n                        </h1>\n                    </div>\n            </div>\n\n        )\n    }\n}\n\nexport default withRouter(PlayNow);","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div style={{backgroundColor:\"#272b2f\", minHeight:\"1200px\", height:\"auto\"}} className={`container${fluid ? \"-fluid\" : \"\"}` }>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      style={{textAlign: \"center\"}}\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Jumbotron(props) {\n  // console.log(props);\n  return (\n    <div\n      style={{ backgroundColor:\"#62cbc2\",borderRadius: \"25px\",margin:\"100px 100px 0px 100px\", height: props.jumboHeight, width: props.jumboWidth, clear: \"both\", paddingTop: 60, textAlign: \"center\" }}\n      // className={`jumbotron ${props.className ? props.className : \"\"}`}\n      className = \"jumbotron\"\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { withRouter,  Redirect } from 'react-router-dom'\nimport Jumbotron from \"../components/Jumbotron\";\nimport Modal from 'react-modal';\nimport axios from 'axios';\nimport API from \"../utils/API.js\";\nimport socketAPI from \"../utils/socketAPI\";\n\nclass Authentication extends Component {\n    state = {\n        users: [],\n        username: \"\",\n        picLink: \"\",\n        email: \"\",\n        password: \"\",\n        errorMessage: \"\",\n        welcomeEmail: \"\",\n        googleSigninUrl: \"\",\n        redirectTo: null,\n        loginOpen: false,\n        registerOpen: false\n    }\n    \n\n    openModal = modal => {\n        this.setState({ [modal]: true });\n    }\n\n    closeModal = modal => {\n        this.setState({ [modal]: false });\n    }\n\n    handleInput = event => {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    // let's try and login   \n    handleFormSubmit = event => {\n        event.preventDefault()\n        const { email, password } = this.state\n        axios.post('/login', {email, password})\n            .then(result => {\n                // this.loadProfileInfo();\n                socketAPI.publishLogin(email);\n                // this.props.history.push(\"/home\")\n                this.setState({ redirectTo: \"/home\" });\n            })\n            .catch(err => {\n                this.setState({ errorMessage: \"Please enter a valid email or password\" })\n            })\n    }\n\n    handleFormRegister = event => {\n        event.preventDefault()\n        const { username, picLink, email, password } = this.state\n        axios.post(\"/register\", { username, picLink, email, password })\n            .then(result => {\n                // console.log(result.data)\n                //this.loadProfileInfo()\n                // this.props.history.push(\"/home\")\n                this.setState({ redirectTo: \"/home\" });\n            }).catch(err => {\n                console.log(err)\n                if (!username || !picLink || !email || !password) {\n                    this.setState({ errorMessage: \"Please fill in all fields\" })\n                }\n                else if (password <= 6) {\n                    this.setState({ errorMessage: \"Password needs to be at least 6 characters\" })\n                }\n            })\n    }\n\n\n    handleFormLogout = event => {\n        event.preventDefault()\n        API.logout().then(result => {\n            // console.log(result.data)\n            this.setState({ welcomeEmail: \"\" })\n        })\n    }\n\n    loadProfileInfo = () => {\n        axios.get('/user/me')\n            .then(response => {\n                this.setState({ welcomeEmail: response.data.email })\n            })\n            .catch(err => {\n                // axios.get(\"/api/google/url\").then(response => {\n                //     this.setState({ googleSigninUrl: response.data.url })\n                // })\n            })\n    }\n\n    componentDidMount() {\n        // Mostly just for developing locally\n        if (window.location.pathname === \"/api/google/callback\") {\n            const searchParams = new URLSearchParams(window.location.search);\n            axios.post(\"/api/google/code\", { code: searchParams.get('code') }).then(() => {\n                this.setState({ redirectTo: \"/\" });\n            })\n        } else {\n            // this.loadProfileInfo()\n        }\n        this.loadUsers();\n    }\n\n    loadUsers() {\n        API.getUsers()\n            .then(res => {\n                // console.log(res.data)\n                this.setState({\n                    users: res.data,\n                })\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        if (this.state.redirectTo) {\n            return <Redirect to={this.state.redirectTo} />\n        }\n\n        return (\n\n            <Container fluid>\n                <Row>\n                    <Col size=\"lg-5 md-12 sm-12\">\n                        <Jumbotron style={{ maxHeight: \"300px\", maxWidth: \"200px\" }}>\n                            <Row>\n                                <Col size=\"6\">\n                                    <button className=\"btn btn-dark\" onClick={() => this.openModal(\"loginOpen\")} data-target=\"#loginModal\">Login</button>\n\n                                    <Modal\n                                        ariaHideApp={false}\n                                        isOpen={this.state.loginOpen}\n                                        onAfterOpen={this.afterOpenModal}\n                                        onRequestClose={() => this.closeModal(\"loginOpen\")}\n                                        // style={customStyles}\n                                        contentLabel=\"Example Modal\"\n                                        id=\"loginModal\"\n                                        style={{\n                                            overlay: {\n                                                position: 'fixed',\n                                                top: 0,\n                                                left: 0,\n                                                right: 0,\n                                                bottom: 0,\n                                                backgroundColor: 'rgba(52, 58, 64, 0.56)'\n                                            },\n                                            content: {\n                                                width: \"400px\",\n                                                height: \"200px\",\n                                                position: 'fixed',\n                                                top: '25%',\n                                                left: '25%',\n                                                border: '1px solid #ccc',\n                                                background: '#fff',\n                                                overflow: 'auto',\n                                                WebkitOverflowScrolling: 'touch',\n                                                borderRadius: '4px',\n                                                outline: 'none',\n                                                padding: '20px'\n                                            }\n                                        }}\n                                    >\n                                        <form>\n                                            <input onChange={this.handleInput} style={{ marginTop: \"10px\" }} name=\"email\" value={this.state.email} type=\"email\" className=\"form-control\" id=\"loginEmail\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"></input>\n                                            <input onChange={this.handleInput} style={{ marginTop: \"10px\" }} name=\"password\" value={this.state.password} type=\"password\" className=\"form-control\" id=\"loginPassword\" placeholder=\"Password\"></input>\n                                            {this.state.errorMessage ? <div style={{ marginTop: \"5px\", color: \"red\", fontSize: \"10px\" }} className=\"fail\">{this.state.errorMessage}</div> : null}\n\n                                            <button type=\"submit\" style={{ marginTop: \"15px\", marginLeft: \"40%\" }} className=\"btn btn-dark\" onClick={this.handleFormSubmit}>Login</button>\n\n                                        </form>\n                                    </Modal>\n\n                                </Col>\n\n                                <Col size=\"6\">\n                                    <button className=\"btn btn-dark\" onClick={() => this.openModal(\"registerOpen\")} data-target=\"#registerModal\">Register</button>\n\n                                    <Modal\n                                        ariaHideApp={false}\n                                        isOpen={this.state.registerOpen}\n                                        onAfterOpen={this.afterOpenModal}\n                                        onRequestClose={() => this.closeModal(\"registerOpen\")}\n                                        // style={customStyles}\n                                        contentLabel=\"Example Modal\"\n                                        id=\"registerModal\"\n                                        style={{\n                                            overlay: {\n                                                position: 'fixed',\n                                                top: 0,\n                                                left: 0,\n                                                right: 0,\n                                                bottom: 0,\n                                                backgroundColor: 'rgba(52, 58, 64, 0.56)'\n                                            },\n                                            content: {\n                                                width: \"400px\",\n                                                height: \"300px\",\n                                                position: 'fixed',\n                                                top: '25%',\n                                                left: '25%',\n                                                border: '1px solid #ccc',\n                                                background: '#fff',\n                                                overflow: 'auto',\n                                                WebkitOverflowScrolling: 'touch',\n                                                borderRadius: '4px',\n                                                outline: 'none',\n                                                padding: '20px'\n                                            }\n                                        }}\n                                    >\n\n                                        <form>\n                                            <input onChange={this.handleInput} style={{ marginTop: \"10px\" }} name=\"username\" value={this.state.username} type=\"text\" className=\"form-control\" id=\"registerName\" aria-describedby=\"emailHelp\" placeholder=\"Enter Your Name\"></input>\n                                            <input onChange={this.handleInput} style={{ marginTop: \"10px\" }} name=\"picLink\" value={this.state.picLink} type=\"text\" className=\"form-control\" id=\"registerImage\" aria-describedby=\"emailHelp\" placeholder=\"Link to your image\"></input>\n                                            <input onChange={this.handleInput} style={{ marginTop: \"10px\" }} name=\"email\" value={this.state.email} type=\"email\" className=\"form-control\" id=\"registerEmail\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"></input>\n                                            <input onChange={this.handleInput} style={{ marginTop: \"10px\" }} name=\"password\" value={this.state.password} type=\"password\" className=\"form-control\" id=\"registerPassword\" placeholder=\"Password\"></input>\n                                            {this.state.errorMessage ? <div style={{ marginTop: \"5px\", color: \"red\", fontSize: \"10px\" }} className=\"fail\">{this.state.errorMessage}</div> : null}\n\n                                            <button type=\"submit\" className=\"btn btn-dark\" style={{ marginTop: \"20px\", marginLeft: \"38%\" }} onClick={this.handleFormRegister}>Register</button>\n\n                                        </form>\n                                    </Modal>\n\n                                </Col>\n                            </Row>\n\n                        </Jumbotron>\n                    </Col>\n                    <Col size=\"lg-7 md-12 sm-12\">\n                        <Jumbotron jumboHeight=\"80%\">\n                            <h4>LEADER BOARD</h4>\n                            <table className=\"table\">\n                                <thead className=\"thead-dark\">\n                                    <tr>\n                                        <th scope=\"col\">Ranking</th>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Wins</th>\n                                        <th scope=\"col\">Losses</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.state.users.slice(0, 5).map((user, index) => {\n                                            return (\n                                                <tr key={index + 1}>\n                                                    <td>{index + 1}</td>\n                                                    <td>{user.username}</td>\n                                                    <td>{user.totalWins}</td>\n                                                    <td>{user.totalLosses}</td>\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n            </Container>\n\n        )\n    }\n}\n\nexport default withRouter(Authentication);\n","import React, { Component } from \"react\";\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\"\n\nclass UserHome extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: [],\n            userInfo: {},\n            redirectTo: null,\n            userInfoFromDB: {},\n            ranking: \"\"\n        };\n    }\n\n    componentDidMount() {\n        this.loadUserData();\n    }\n\n    loadUserById() {\n        // const id = this.props.match.params.id\n        console.log(\"User ID \" + this.state.userInfo.id)\n        const id = this.state.userInfo.id\n        API.getOneUser(id)\n            .then(res => {\n                // console.log(res.data);\n                // UsersInfo.push(res.data);\n                this.setState({\n                    userInfoFromDB: res.data,\n                })\n                console.log(this.state.userInfoFromDB)\n            })\n            .catch(err => console.log(err));\n    }\n\n    findRanking = () => {\n        let ranking = 0;\n        let allUsers = this.state.users;\n        // console.log(allUsers);\n        for (let i = 0; i < allUsers.length; i++) {\n            if(allUsers[i]._id === this.state.userInfo.id){\n                ranking = (i + 1);\n                // console.log(\"user Found \" + i)\n                // console.log(ranking)\n                break;\n            }\n            // console.log(allUsers[i]);\n        }\n        this.setState({\n            ranking: ranking\n        })\n    }\n    \n    loadUserData(){\n        API.checkAuth()\n            .then(response => {\n                // this runs if the user is logged in\n                // console.log(\"response: \", response.data)\n                this.setState({userInfo:response.data}, this.loadUsers);\n                this.loadUserById();\n            })\n            .catch(err => {\n                // this runs if the user is NOT logged in\n                this.setState({ redirectTo: \"/\" })\n            })\n    }\n\n    loadUsers() {\n        API.getUsers()\n            .then(res => {\n                // console.log(\"All users\",res.data);\n                this.setState({\n                    users: res.data,\n                }, \n                this.findRanking\n                )\n                // console.log(res.data)\n            })\n            .catch(err => console.log(err));\n    }\n\n    handlePlayNowBtn = () => {\n        let path = \"/play\";\n        this.props.history.push(path);\n    }\n\n    render() {\n        if (this.state.redirectTo) {\n            return <Redirect to={this.state.redirectTo} />\n        }\n        console.log(\"USER HOME RENDER\");\n        return (\n            <Container fluid>\n                <Row>\n                    <Col size=\"lg-5 md-12 sm-12\">\n                        <Jumbotron className=\"userData\" style={{maxWidth:\"400px\", maxHeight:\"500px\"}}>\n                            {/* User image goes here */}\n                            <img style={{width:\"200px\"}} alt={\"\"} src={this.state.userInfoFromDB.picLink} />\n                            <div className=\"name\" style={{paddingTop: \"25px\"}}>\n                                <strong>Name: </strong> {this.state.userInfoFromDB.username}\n                            </div>\n                            <div>\n                                <strong>Wins:</strong> {this.state.userInfoFromDB.totalWins}\n                            </div>\n                            <div>\n                                <strong>Losses:</strong> {this.state.userInfoFromDB.totalLosses}\n                            </div>\n                            <div className=\"ranking\" style={{paddingBottom: \"30px\"}}>\n                                <strong>Ranking:</strong> {this.state.ranking}\n                            </div>\n                            <Row className=\"justify-content-center\"style={{paddingTop:\"35px !important\"}} >\n                                <Col size=\"lg-12 md-12 sm-12\">\n                                    <button className=\"btn btn-primary btn-dark\"  onClick={() => this.handlePlayNowBtn()}>Play Game</button>\n                                </Col>\n                            </Row>\n                        </Jumbotron>\n                    </Col>\n                    <Col size=\"lg-7 md-12 sm-12\">\n                        <Jumbotron style={{height:\"500px\"}}>\n                            <h4>LEADER BOARD</h4>\n                            <table className=\"table\">\n                                <thead className=\"thead-dark\">\n                                    <tr>\n                                        <th scope=\"col\">Ranking</th>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Wins</th>\n                                        <th scope=\"col\">Losses</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.state.users.slice(0,5).map((user, index) => {\n                                            return (\n                                                <tr key={index + 1}>\n                                                    <td>{index + 1}</td>\n                                                    <td>{user.username}</td>\n                                                    <td>{user.totalWins}</td>\n                                                    <td>{user.totalLosses}</td>\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n            </Container>\n\n        )\n    }\n}\n\nexport default withRouter(UserHome);\n","import React from \"react\";\n\nconst styles = {\n    marginTop: \"10px\"\n}\n\nconst MPCategory = props => (\n    <div>\n        <div style={styles} id={props.id} className=\"scategory\" onClick={() => props.handleSelect(props.id)}>\n            <div className=\"scatcat\"><strong>{props.category}</strong></div>\n        </div>\n    </div >\n);\nexport default MPCategory;","import React, { Component } from \"react\";\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport socketAPI from \"../utils/socketAPI\";\nimport API from \"../utils/API\";\nimport MPCategory from \"../components/MPCategory\";\n\n\nclass MultiPlayer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            category: [],\n            selected: \"\",\n            position: \"\",\n            gameStart: false,\n            matchmakingOpen: false,\n        }\n        this.handleCatSelect = this.handleCatSelect.bind(this);\n    }\n\n    componentDidMount() {\n        API.getGames().then(res => {\n            this.setState({\n                category: res.data\n            })\n            // () => console.log(this.state.category))\n        });\n\n        socketAPI.subscribeMatchmaking((message) => {\n            //this message says that the player is waiting in matchmaking\n            console.log(message);\n            //function that shows matchmaking modal\n            this.setState({ matchmakingOpen: true });\n        });\n\n        socketAPI.subscribeGameStart((info) => {\n            // console.log(\"Game information\", info);\n            this.setState({\n                position: info.position\n            }, () => {\n                console.log(\"MultiplayerCat Position = \" + this.state.position);\n                this.props.history.push('/game');\n                this.setState({ matchmakingOpen: false });\n            })\n        });\n    }\n\n    publishSeekGame = (category) => {\n        console.log(\"Looking for a Session to create or join with ID of: \" + category);\n        socketAPI.publishSeekGame(category);\n    }\n\n    handleCatSelect = (id) => {\n        console.log(\"User chose: \" + id);\n        this.publishSeekGame(id);\n    }\n\n    render() {\n        if (this.state.matchmakingOpen) {\n            return (\n                <div className=\"circlecontainer\">\n                    <div className=\"lds-circle\"><div>\n                    </div><h5 className=\"match\">Looking for a match...</h5></div>\n                </div>\n            );\n        }\n        if (this.state.redirectTo) {\n            return <Redirect to={this.state.redirectTo} />\n        }\n        return (\n            <div>\n                <div className=\"scatContain\">\n                    {this.state.category.map(category => (\n                        <MPCategory\n                            id={category._id}\n                            key={category._id}\n                            category={category.category}\n                            handleSelect={this.handleCatSelect}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    };\n}\n\n\nexport default withRouter(MultiPlayer);","import React from \"react\";\n// import \"./GameCard.css\";\n\nconst styles = {\n    marginTop: \"20px\",\n    borderColor: \"grey\"\n}\n\nconst GameCard = props => (\n\n    <div>\n        <div style={styles} id={props.answer} onClick={() => props.publishPlayerSelect(props.id)} className=\"card grow\" >\n            <h3>{props.id}</h3>\n        </div>\n    </div>\n\n);\n\n\nexport default GameCard;","import React from \"react\";\n// import \"./GameCol.css\";\n\nconst style = {\n    // paddingTop: \"20px\",\n    height: \"100%\",\n    display: \"flex\",\n    flex: 1,\n    flexWrap: \"wrap\",\n    // flexDirection: \"row\",\n    // padding: \"20px\",\n    justifyContent: \"space-around\",\n    alignContent: \"flex-start\",\n    overflow: \"auto\"\n}\n\nfunction GameCol(props) {\n    const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  \n    return (\n      <div style={style} className={size}>\n        {props.children}\n      </div>\n    );\n  }\n\nexport default GameCol;","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport API from \"../utils/API\";\nimport MPGameCard from \"../components/MPGameCard\";\nimport GameCol from \"../components//GameCol\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport socketAPI from \"../utils/socketAPI\";\n\nlet quizQuestions = [];\n\nclass GameContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            position: this.props.position,\n            quizId: this.props.selected,\n            userInfo: \"\",\n            title: \"\",\n            category: \"\",\n            question: \"\",\n            questionCount: 0,\n            answers: [],\n            correctAnswer: \"\",\n            correct: 0,\n            incorrect: 0,\n            userSelect: \"\",\n            outcome: \"\",\n            message: \"\",\n            index: 0,\n            timer: 10,\n\n            // showLoading: true,\n            redirectTo: null,\n        };\n\n        this.publishPlayerSelect = this.publishPlayerSelect.bind(this)\n    }\n\n    //TODO: Add route that will get the game based on the user's selection\n    componentDidMount() {\n        API.checkAuth()\n            .then(response => {\n                // this runs if the user is logged in\n                this.setState({ userInfo: response.data },\n                    () => console.log(JSON.stringify(this.state.userInfo)));\n                //Grab the session info from the server\n                socketAPI.publishGCMount();\n                //Then set the state with the session info\n                socketAPI.subscribeSessionInfo((info) => {\n                    console.log(\"Subcribe Session Info\" + JSON.stringify(info));\n                    let userPosition = \"\";\n\n                    if (this.state.userInfo.email === info.playerOne) {\n                        userPosition = \"p1\"\n                    } else if (this.state.userInfo.email === info.playerTwo) {\n                        userPosition = \"p2\"\n                    }\n\n                    this.setState({\n                        category: info.categoryId,\n                        position: userPosition\n                    }, () => {\n                        console.log(\"User position in state \" + this.state.position);\n                        this.getGame(this.state.category);\n\n                        //Start Timer\n                        // this.timerID = setInterval(() => this.decrimentTime(), 1000);\n                    })\n                });\n            }).catch(err => {\n                // this runs if the uer is NOT logged in\n                this.setState({ redirectTo: \"/\" })\n            });\n\n        socketAPI.subscribeTimerDec((timer) => {\n            // console.log(\"Timer\" + timer);\n            this.setState({\n                timer: timer\n            })\n        });\n\n        socketAPI.subscribeEndTimer((message) => {\n            console.log(\"Time's Up!\");\n            this.setUserAnswer((result) => {\n                socketAPI.publishPlayerSelect(result);\n            });\n        });\n        //Setting up Socket Listeners for Game:\n        //Message comes back after either user selects an answer\n        socketAPI.subscribeScoreUpdate((message) => {\n            console.log(message);\n            this.setState({\n                message: message\n            })\n        });\n\n        //Score comes back when both players have selected an ansnwer\n        //Also updates to the next question\n        socketAPI.subscribeNextQuestion((score) => {\n            console.log(\"New Score = \" + JSON.stringify(score));\n            //This variable is checking to see what the next index value will be\n            let nextIndex = (this.state.index + 1);\n\n            // if the next index value is equal to the total amount of questions \n            // then stop the game otherwise, keep going\n            if (nextIndex === this.state.questionCount) {\n                this.endGame();\n            } else {\n                this.setNextQuestion();\n            }\n        });\n\n        socketAPI.subscribeFinalScore((score) => {\n            console.log(JSON.stringify(score));\n            let userResult = \"\";\n            if (score.winner === \"tie\") {\n                userResult = this.state.userInfo.id\n            } else if (score.winner === this.state.userInfo.id) {\n                userResult = \"win\";\n            } else if (score.winner !== this.state.userInfo.id) {\n                userResult = \"loss\";\n            }\n\n            API.updateUserScore(this.state.userInfo.id)\n            .then(res => {\n                console.log(res);\n            })\n            this.setState({ redirectTo: \"/home\" });\n        })\n    }\n\n    //Getting the game information from the Database based on the game's ID\n    //Then updating the state\n    getGame(gameId) {\n        API.getOneGame(gameId)\n            .then(res => {\n                //quiz Questions will be held outside the component \n                //so we can go through the questions/answers with an index value\n                quizQuestions = res.data;\n                this.setQuestionState(res.data);\n            });\n    }\n\n    // Setting the state of the game\n    setQuestionState(data) {\n        // console.log(data);\n        let index = this.state.index;\n        this.setState({\n            title: data.title,\n            category: data.category,\n            question: data.questions[index].question,\n            answers: data.questions[index].answers,\n            correctAnswer: data.questions[index].correctAnswer,\n            questionCount: data.questions.length\n        }, () => {\n            // console.log(\"STATE\" + JSON.stringify(this.state));\n            // console.log(\"QUIZ QUESTIONS \" + JSON.stringify(quizQuestions));\n        });\n    }\n\n    // This function decreases the time limit of the game \n    // decrimentTime = () => {\n    //     if (this.state.timer !== 0) {\n    //         this.setState({\n    //             timer: this.state.timer - 1\n    //         });\n    //     } else {\n    //         this.setUserAnswer((result) => {\n    //             socketAPI.publishPlayerSelect(result)\n    //         });\n    //     }\n    // }\n\n    //Click Handler\n    publishPlayerSelect(selection) {\n        console.log(\"User Selected: \" + selection);\n        this.setState({\n            userSelect: selection\n        }, () => {\n            //putting this in a callback so we're sure the state has been updated\n            //before setUserAnswer is called\n            this.setUserAnswer((result) => {\n                console.log(\"User is \" + result);\n                socketAPI.publishPlayerSelect(result);\n            });\n        })\n    };\n\n\n    //This method checks if the user answer is correct and checks if the\n    // game continues or not based on if there are any questions left\n    setUserAnswer = (callback) => {\n        let userAnswerResult = \"\";\n\n        //if the user didn't select an answer add to incorrect\n        if (this.state.userSelect === \"\") {\n            // console.log(\"No answer selected\");\n            let newIncorrect = this.state.incorrect + 1;\n            this.setState({\n                incorrect: newIncorrect\n            });\n            userAnswerResult = \"incorrect\";\n\n            //if the user selected the correct answer, add to correct\n        } else if (this.state.userSelect === this.state.correctAnswer) {\n            // console.log(\"Correct answer selected\");\n            let newCorrect = this.state.correct + 1;\n            this.setState({\n                correct: newCorrect\n            });\n            userAnswerResult = \"correct\"\n\n            //if the user selected the incorrect answer, add to incorrect\n        } else if (this.state.userSelect !== this.state.correctAnswer) {\n            // console.log(\"Incorrect Answer selected\");\n            let newIncorrect = this.state.incorrect + 1;\n            this.setState({\n                incorrect: newIncorrect\n            });\n            userAnswerResult = \"incorrect\";\n        }\n\n        console.log(\"User answer result = \" + userAnswerResult);\n        callback(userAnswerResult);\n        this.setState({\n            userSelect: \"\"\n        })\n        userAnswerResult = \"\";\n    }\n\n    setNextQuestion = () => {\n        let newIndex = this.state.index + 1;\n        this.setState({\n            index: newIndex,\n            timer: 10,\n            question: quizQuestions.questions[newIndex].question,\n            answers: quizQuestions.questions[newIndex].answers,\n            correctAnswer: quizQuestions.questions[newIndex].correctAnswer,\n            userSelect: \"\"\n        }, function () {\n            // console.log(this.state);\n        });\n    }\n\n    endGame = () => {\n        console.log(\"GAME OVER\");\n        if (this.state.position === \"p1\") {\n            console.log(\"Player One sending Game Data to server\");\n            socketAPI.publishEndGame();\n        } else {\n            console.log(\"Player 2 waiting on score\");\n        }\n    }\n\n\n    //Query the db to compare user's scores and determine a winner\n    //If this user is the winner, display \"winner\"\n    //Else display \"Try again next time\"\n    //PUT result in db\n    //Set timer for 5 seconds and then...  \n    //Send back to user's homepage\n\n\n    render() {\n        if (this.state.redirectTo) {\n            return <Redirect to={this.state.redirectTo} />\n        }\n        return (\n            <div>\n                <Container fluid=\"-fluid\">\n                    <Row>\n                        <Col size=\"12\" id=\"titleCol\">\n                            <h5 style={{ color: \"white\", marginTop: \"100px\", fontSize: \"30px\" }}\n                                className=\"text-center\"> {this.state.title} </h5>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <GameCol size=\"12\">\n                            <Jumbotron jumboWidth=\"800px\" className=\"userData\" jumboHeight=\"80%\">\n\n                                <h2>{this.state.question}</h2>\n                                <h4>Tick Tock <strong>{this.state.timer}s</strong> left</h4>\n                                {this.state.answers.map(answer => (\n                                    <MPGameCard\n                                        id={answer}\n                                        key={answer}\n                                        publishPlayerSelect={this.publishPlayerSelect}\n                                    />\n                                ))}\n                            </Jumbotron>\n\n                        </GameCol>\n\n                    </Row>\n                    <Row>\n                        <Col size=\"5\" id=\"player1\">\n                            <img style={{ marginTop: \"50px\", width: \"100px\", height: \"100px\", backgroundColor: \"white\", borderRadius: \"50%\" }} alt={\"player1\"} src={\"https://yokoent.com/images/iron-man-png-chibi-1.png\"} />\n                            <h5 style={{ color: \"white\" }}>Score</h5>\n                        </Col>\n                        <Col size=\"2\" id=\"message\">\n                            <h3>{this.state.message}</h3>\n                        </Col>\n                        <Col size=\"5\" id=\"player2\">\n                            <img style={{ marginTop: \"50px\", width: \"100px\", height: \"100px\", backgroundColor: \"white\", borderRadius: \"50%\" }} alt={\"player1\"} src={\"https://i.pinimg.com/originals/2c/16/8a/2c168a24a066e44e3b0903f453449fe5.jpg\"} />\n                            <h5 style={{ color: \"white\" }}>Score</h5>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default GameContainer","import React from \"react\";\n// import \"./GameCard.css\";\n\nconst styles = {\n    marginTop: \"20px\",\n    borderColor: \"grey\"\n}\n\nconst GameCard = props => (\n\n    <div>\n        <div style={styles} id={props.answer} onClick={() => props.handleSelection(props.id)} className=\"card grow\" >\n            <h3>{props.id}</h3>\n        </div>\n    </div>\n\n);\n\n\nexport default GameCard;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport GameCard from \"../components/GameCard\";\nimport GameCol from \"../components//GameCol\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nlet quizQuestions = [];\nlet nextIndex = 0;\nlet newIndex = 0;\n\nclass SinglePlayerGameContainer extends Component {\n    state = {\n        title: \"\",\n        category: \"\",\n        question: \"\",\n        questionCount: 0,\n        answers: [],\n        correctAnswer: \"\",\n        correct: 0,\n        incorrect: 0,\n        userSelect: \"\",\n        outcome: \"GAME OVER\",\n        index: 0,\n        timer: 10,\n        socketArr: \"\",\n        userInfo: {}\n    };\n\n    //TODO: Add route that will get the game based on the user's selection\n    componentDidMount() {\n        this.getGame(this.props.id);\n        this.timerID = setInterval(() => this.decrimentTime(), 1000);\n        this.getUserPic();\n    }\n\n    getUserPic = () => {\n        API.checkAuth()\n            .then(response => {\n                // this runs if the user is logged in\n                console.log(\"response: \", response.data)\n                this.setState({ userInfo: response.data }, this.loadUsers);\n            })\n            .catch(err => {\n                // this runs if the user is NOT logged in\n                this.setState({ redirectTo: \"/\" })\n            })\n    }\n\n    //Getting the game information from the Database based on the game's ID\n    //Then updating the state\n    getGame(gameId) {\n        API.getOneGame(gameId)\n            .then(res => {\n                //quiz Questions will be held outside the component \n                //so we can go through the questions/answers with an index value\n                quizQuestions = res.data;\n                this.setQuestionState(res.data);\n            });\n    }\n\n    // Setting the state of the game\n    setQuestionState(data) {\n        let index = this.state.index;\n        this.setState({\n            title: data.title,\n            category: data.category,\n            question: data.questions[index].question,\n            answers: data.questions[index].answers,\n            correctAnswer: data.questions[index].correctAnswer,\n            questionCount: data.questions.length\n        }, () => {\n        });\n    }\n\n    // This function decreases the time limit of the game \n    decrimentTime() {\n        if (this.state.timer !== 0) {\n            this.setState({\n                timer: this.state.timer - 1\n            });\n        } else {\n            this.setUserAnswer();\n        }\n    }\n\n    //This method updates the game state basked on what the user clicked.\n    handleSelection = id => {\n        console.log(id);\n        this.setState({\n            userSelect: id,\n            click: true\n        }, () => {\n            //putting this in a callback so we're sure the state has been updated\n            //before setUserAnswer is called\n            this.setUserAnswer();\n        });\n    };\n\n    //This method checks if the user answer is correct and checks if the\n    //game continues or not based on if there are any questions left\n    setUserAnswer = () => {\n        //if the user didn't select an answer add to incorrect\n        console.log(this.state.index);\n        console.log(this.state.questionCount);\n        if (this.state.userSelect === \"\") {\n            console.log(\"No answer selected\");\n\n            let newIncorrect = this.state.incorrect + 1;\n            this.setState({\n                incorrect: newIncorrect\n            });\n            //if the user selected the correct answer, add to correct\n        } else if (this.state.userSelect === this.state.correctAnswer) {\n            console.log(\"Correct answer selected\");\n            let newCorrect = this.state.correct + 1;\n            this.setState({\n                correct: newCorrect\n            });\n            //if the user selected the incorrect answer, add to incorrect\n        } else if (this.state.userSelect !== this.state.correctAnswer) {\n            console.log(\"Incorrect Answer selected\");\n            let newIncorrect = this.state.incorrect + 1;\n            this.setState({\n                incorrect: newIncorrect\n            });\n        }\n\n        //This variable is checking to see what the next index value will be\n        nextIndex = (this.state.index + 1);\n\n        //if the next index value is equal to the total amount of questions then stop the game\n        //otherwise, keep going\n        if (nextIndex === this.state.questionCount) {\n            console.log(this.state.questionCount);\n            this.endGame();\n        } else {\n            this.setNextQuestion();\n        }\n    }\n\n    setNextQuestion = () => {\n        newIndex = this.state.index + 1;\n        this.setState({\n            index: newIndex,\n            timer: 10,\n            question: quizQuestions.questions[newIndex].question,\n            answers: quizQuestions.questions[newIndex].answers,\n            correctAnswer: quizQuestions.questions[newIndex].correctAnswer,\n            userSelect: \"\",\n            click: false\n\n        }, function () {\n            console.log(this.state);\n        });\n    }\n\n    endGame = () => {\n        console.log(\"GAME OVER\");\n        clearInterval(this.timerID);\n    }\n\n\n    //Query the db to compare user's scores and determine a winner\n    //If this user is the winner, display \"winner\"\n    //Else display \"Try again next time\"\n    //PUT result in db\n    //Set timer for 5 seconds and then...  \n    //Send back to user's homepage\n\n    render() {\n        return (\n            <div>\n                <Container fluid=\"-fluid\">\n                    <Row>\n                        <Col size=\"12\" id=\"titleCol\">\n                            <h5 style={{ color: \"white\", marginTop: \"100px\", fontSize: \"30px\" }} className=\"text-center\"> {this.state.title} </h5>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <GameCol size=\"12\">\n                            <Jumbotron jumboWidth=\"800px\" className=\"userData\" jumboHeight=\"80%\">\n                                {nextIndex !== this.state.questionCount ? (\n                                    <div>\n                                        <h2>{this.state.question}</h2>\n                                        <h4>Tick Tock <strong>{this.state.timer}s</strong> left</h4>\n\n\n                                        {this.state.answers.map(answer => (\n                                            <GameCard\n                                                id={answer}\n                                                key={answer}\n                                                answer={answer}\n                                                correctAnswer={this.state.correctAnswer}\n                                                handleSelection={this.handleSelection}\n                                            />\n                                        ))}\n                                    </div>\n                                ) : (\n                                        <div>\n                                            <h5><strong>{this.state.outcome}</strong></h5>\n                                        </div>\n                                    )}\n                            </Jumbotron>\n                        </GameCol>\n                    </Row>\n\n                    <Row>\n                        <Col size=\"3\"></Col>\n                        <Col size=\"3\" id=\"correct\">\n                            <h5 style={{ color: \"white\", marginTop: \"10px\" }}>Correct: {this.state.correct}</h5>\n                        </Col>\n                        <Col size=\"3\" id=\"incorrect\">\n                            <h5 style={{ color: \"white\", marginTop: \"10px\" }}>Incorrect: {this.state.incorrect}</h5>\n                        </Col>\n                        <Col size=\"3\"></Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default SinglePlayerGameContainer","import React from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction NoMatch() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1>404 Page Not Found</h1>\n            <h1>\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                🙄\n              </span>\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default NoMatch;\n","import React from \"react\";\n\nconst styles = {\n    marginTop: \"10px\"\n}\n\nconst SPGameCard = props => (\n    <div>\n        {/* <button id={props.id} onClick={() => props.loadPage(props.id)}> */}\n            <div style={styles} id={props.id} className=\"scategory\" onClick={() => props.loadPage(props.id)}>\n                <div className=\"scatcat\"><strong>{props.category}</strong></div>\n            </div>\n        {/* </button > */}\n    </div >\n);\nexport default SPGameCard;","import React, { Component } from \"react\";\nimport './Pages.css';\nimport API from \"../utils/API\";\nimport SPGameCard from \"../components/SPGameCard\";\nimport SPGameContainer from './SPGameContainer';\n\n\nlet addCategory = [];\n\nclass SingleCategory extends Component {\n    state = {\n        category: [],\n        id: \"\"\n    };\n\n    componentDidMount() {\n        API.getGames().then(res => {\n            // console.log(res.data[0].category);\n            this.getAllGames(res.data);\n        });\n    }\n\n    loadPage = (id) => {\n        console.log(id);\n        this.setState({\n            id: id\n        })\n    };\n    \n    getAllGames(data) {\n        // console.log(data);\n        for (let i = 0; i < data.length; i++) {\n            addCategory.push(data[i]);\n        }\n        this.setState({\n            category: addCategory\n        }, () => {\n            console.log(\"State category\", this.state.category);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.id === \"\" ? (\n                    <div className=\"scatContain\">\n                        {this.state.category.map(category => (\n                            <SPGameCard\n                                id={category._id}\n                                key={category._id}\n                                category={category.category}\n                                loadPage={this.loadPage}\n\n                            />\n                        ))}\n                    </div>\n                ) : (\n                        <SPGameContainer id={this.state.id} />\n                    )}\n\n\n            </div>\n        )\n\n    };\n\n}\n\n\nexport default SingleCategory;\n","// import React from 'react';\nimport React, { Component } from \"react\";\n// import openSocket from 'socket.io-client';\nimport socketAPI from './utils/socketAPI';\nimport Nav from \"./components/Nav\";\nimport './App.css';\nimport PlayNow from \"./pages/PlayNow\";\nimport Authentication from \"./pages/Authentication\";\nimport UserHome from \"./pages/UserHome\";\nimport MultiPlayerCat from \"./pages/MultiPlayerCategory\";\nimport GameContainer from \"./pages/GameContainer\";\nimport SingleGameContainer from \"./pages/SPGameContainer\";\nimport NoMatch from \"./pages/NoMatch\";\nimport SingleCategory from \"./pages/SingleCategory\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// const socket = openSocket(\"http://localhost:3001\", {transports: ['websocket']});\n\nclass App extends Component {\n  state = {\n    userEmail: \"\",\n    authorized: false,\n    inGame: false\n  }\n\n  componentDidMount = () => {\n    socketAPI.subscribeAuthorized((message) => {\n      console.log(\"AUTHORIZED\", message);\n      if(message === true){\n        this.setState({\n          authorized: true\n        }\n          // () => {console.log(\"Application State: \" + this.state)}\n        )} else {console.log(\"State not updated\")}\n    })\n  }\n\n  publishLogin = (email) => {\n    console.log(\"login\");\n    socketAPI.publishLogin(email);\n  }\n\n  render() {\n    console.log(\"RENDER PARTY\");\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Authentication} />\n            <Route exact path=\"/home\" component={() => <UserHome publishLogin={this.publishLogin} \n                  authorized={this.state.authorized} />} />\n            <Route exact path=\"/play\" component={PlayNow} />\n            <Route exact path=\"/game\" component={GameContainer} />\n            <Route exact path=\"/singlegame\" component={SingleGameContainer} />\n            <Route exact path=\"/multi\" component={MultiPlayerCat} />\n            <Route exact path=\"/single\" component={SingleCategory} />\n            <Route component={NoMatch} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n\n\n\n\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}